// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgres"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  fullname  String
  email     String   @unique
  pvc       String   @unique
  password  String
  role      Role     @default(USER)
  votes     Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id           Int        @id @default(autoincrement())
  voter        User       @relation(fields: [voterId], references: [id])
  voterId      Int
  contestant   Contestant @relation(fields: [contestantId], references: [id])
  contestantId Int
  // category     Category   @relation(fields: [categoryId], references: [id])
  // categoryId   Int
  createdAt    DateTime
  updatedAt    DateTime   @updatedAt
}

model Contestant {
  id         Int       @id @default(autoincrement())
  name       String
  category   String
  Vote       Vote[]
  totalVote  Int       @default(0)
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  createdAt  DateTime
  updatedAt  DateTime  @updatedAt
  Election   Election? @relation(fields: [electionId], references: [id])
  electionId Int?
}

model Category {
  id          Int          @id @default(autoincrement())
  name        String
  contestants Contestant[]
  createdAt   DateTime
  updatedAt   DateTime     @updatedAt
  Election    Election[]
}

model Election {
  id          Int          @id @default(autoincrement())
  name        String
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  Int
  year        Int
  status      String       @default("InProgress")
  contestants Contestant[]
  createdAt   DateTime
  updatedAt   DateTime     @updatedAt
}

enum Role {
  USER
  ADMIN
}
